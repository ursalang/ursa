--- src/grammar/ursa.ohm-bundle.d.ts	2025-08-11 22:01:50.374388185 +0100
+++ src/grammar/ursa.ohm-bundle.d.part-patched.ts	2025-08-11 22:01:50.460330010 +0100
@@ -4,14 +4,33 @@
 import {
   BaseActionDict,
   Grammar,
-  IterationNode,
-  Node,
-  NonterminalNode,
+  Node as NodeBase,
+  NonterminalNode as NonterminalNodeBase,
   Semantics,
   TerminalNode
 } from 'ohm-js';
 
-export interface UrsaActionDict<T> extends BaseActionDict<T> {
+interface NodeI<Operations> extends NodeBase {
+  child(idx: number): Node<Operations>;
+  children: Node<Operations>[];
+  asIteration(): IterationNode<Operations>;
+}
+
+export type Node<Operations> = NodeI<Operations> & Operations;
+
+export type IterationNode<Operations> = Node<Operations>;
+
+export type NonterminalNode<Operations> = Node<Operations>;
+
+export type ThisNode<Args, Operations> = Node<Operations> & {
+  // Only the `this` of semantics action routines has this member.
+  args: Args;
+};
+
+export interface UrsaActionDict<T, Node, NonterminalNode, IterationNode, ThisNode> extends BaseActionDict<T> {
+  _terminal?: (this: ThisNode) => T;
+  _nonterminal?: (this: ThisNode, ...children: NonterminalNode[]) => T;
+  _iter?: (this: ThisNode, ...children: NonterminalNode[]) => T;
   Sequence?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
   sc?: (this: NonterminalNode, arg0: IterationNode | NonterminalNode, arg1: NonterminalNode | TerminalNode) => T;
   PrimaryExp_null?: (this: NonterminalNode, arg0: NonterminalNode) => T;
@@ -167,18 +186,19 @@
   unicodeSpaceSeparator?: (this: NonterminalNode, arg0: TerminalNode) => T;
 }
 
-export interface UrsaSemantics extends Semantics {
-  addOperation<T>(name: string, actionDict: UrsaActionDict<T>): this;
-  extendOperation<T>(name: string, actionDict: UrsaActionDict<T>): this;
-  addAttribute<T>(name: string, actionDict: UrsaActionDict<T>): this;
-  extendAttribute<T>(name: string, actionDict: UrsaActionDict<T>): this;
+interface UrsaSemanticsI<Node, NonterminalNode, IterationNode, ThisNode, Operations> extends Semantics {
+  (match: MatchResult): Operations;
+  addOperation<T>(name: string, actionDict: UrsaActionDict<T, Node, NonterminalNode, IterationNode, ThisNode>): this;
+  extendOperation<T>(name: string, actionDict: UrsaActionDict<T, Node, NonterminalNode, IterationNode, ThisNode>): this;
+  addAttribute<T>(name: string, actionDict: UrsaActionDict<T, Node, NonterminalNode, IterationNode, ThisNode>): this;
+  extendAttribute<T>(name: string, actionDict: UrsaActionDict<T, Node, NonterminalNode, IterationNode, ThisNode>): this;
 }
+export type UrsaSemantics<Node, NonterminalNode, IterationNode, ThisNode, Operations> = UrsaSemanticsI<Node, NonterminalNode, IterationNode, ThisNode, Operations> & Operations;
 
 export interface UrsaGrammar extends Grammar {
-  createSemantics(): UrsaSemantics;
-  extendSemantics(superSemantics: UrsaSemantics): UrsaSemantics;
+  createSemantics<Node, NonterminalNode, IterationNode, ThisNode, Operations>(): UrsaSemantics<Node, NonterminalNode, IterationNode, ThisNode, Operations>;
+  extendSemantics<Node, NonterminalNode, IterationNode, ThisNode, Operations>(superSemantics: UrsaSemantics<Node, NonterminalNode, IterationNode, ThisNode, Operations>): UrsaSemantics<Node, NonterminalNode, IterationNode, ThisNode, Operations>;
 }
 
 declare const grammar: UrsaGrammar;
 export default grammar;
-
